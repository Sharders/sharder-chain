# Copyright \u00A9 2017-2018 Sharder Foundation.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# version 2 as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, you can visit it at:
# https://www.gnu.org/licenses/old-licenses/gpl-2.0.txt
#
# This software uses third party libraries and open-source programs,
# distributed under licenses described in 3RD-PARTY-LICENSES.


# Do not modify this file. Instead, create a sharder.properties file with only the
# properties you need to change, and set them there. The values in 
# sharder.properties override those in sharder-default.properties.



#### SYSTEM ####

# Set the socks proxy host.
#socksProxyHost=localhost

# Set the socks proxy port.
#socksProxyPort=9050

sharder.runtime.mode=desktop

#### PEER NETWORKING ####

# Announce my IP address/hostname to peers and allow them to share it with other
# peers. If disabled, peer networking servlet will not be started at all.
sharder.shareMyAddress=true

# Enable UPnP for the peer port.
sharder.enablePeerUPnP=true

# UPnP gateway http read timeout, milliseconds. Set to -1 to disable.
# Default 7000 if not set.
#sharder.upnpGatewayTimeout=7000

# UPnP gateway socket connection timeout, milliseconds. Set to -1 to disable.
# Default 3000 if not set.
#sharder.upnpDiscoverTimeout=3000

# Host interface on which to listen for peer networking requests, default all.
# Use 0.0.0.0 to listen on all interfaces, including IPv6.
sharder.peerServerHost=0.0.0.0

# My externally visible IP address or host name, to be announced to peers.
# It can optionally include a port number, which will also be announced to
# peers, and may be different from sharder.peerServerPort (useful if you do port
# forwarding behind a router).
sharder.myAddress=

# My platform, to be announced to peers.
sharder.myPlatform=

# My hallmark, if available.
sharder.myHallmark=

# Default initial peers. Only used if sharder.usePeersDb=true.
# Do not modify. Add custom peers to sharder.wellKnownPeers instead.
sharder.defaultPeers=
  
# A list of well known peer addresses / host names, separated by '; '. These
# peers are always kept in connected state.
sharder.wellKnownPeers=

# Known bad peers to be blacklisted.
sharder.knownBlacklistedPeers=

# Default initial peers used for testnet only. Only used if sharder.usePeersDb=true.
# Do not modify. Add custom testnet peers to sharder.testnetPeers instead.
sharder.defaultTestnetPeers=testboot.sharder.org;testna.sharder.org;testnb.sharder.org;testboot.sharder.io;testna.sharder.io;testnb.sharder.io

# Well known testnet peers.
sharder.testnetPeers=testboot.sharder.org;testboot.sharder.io

# Maximum number of inbound connections.
sharder.maxNumberOfInboundConnections=250

# Maximum number of outbound connections.
sharder.maxNumberOfOutboundConnections=50

# Maintain active connections with at least that many peers.
sharder.maxNumberOfConnectedPublicPeers=20

# Stop adding new peers when number of known peers exceeds that many.
sharder.maxNumberOfKnownPeers=2000

# Stop removing old peers when number of known peers drops below that many.
sharder.minNumberOfKnownPeers=1000

# Peer networking connect timeout for outgoing connections.
sharder.connectTimeout=10000

# Peer networking read timeout for outgoing connections.
sharder.readTimeout=20000

# Peer networking server idle timeout, milliseconds.
sharder.peerServerIdleTimeout=30000

# Use WebSocket connection if supported by the remote peer.
sharder.useWebSockets=true

# WebSocket connection idle timeout (milliseconds).
sharder.webSocketIdleTimeout=900000

# Use the peer hallmark to only connect with peers above the defined push/pull
# hallmark thresholds.
# Disabling hallmark protection also disables weighting of peers by hallmark
# weight, so connecting to any of your peers becomes equally likely.
sharder.enableHallmarkProtection=true

# Hallmark threshold to use when sending data to peers.
sharder.pushThreshold=0

# Hallmark threshold to use when requesting data from peers.
sharder.pullThreshold=0

# Blacklist peers for 600000 milliseconds (i.e. 10 minutes by default).
sharder.blacklistingPeriod=600000

# Consider a new transaction or block sent after 10 peers have received it.
sharder.sendToPeersLimit=10

# Enable the Jetty Denial of Service Filter for the peer networking server.
sharder.enablePeerServerDoSFilter=true

# Compress Http responses for the peer networking server.
sharder.enablePeerServerGZIPFilter=true


# Network definitions is follows:
# Mainnet: peer port is 3218
# Testnet: peer port is 8218
# Devnet: peer port is 9218
sharder.network=Testnet

# Save known peers in the database
sharder.savePeers=true

# Set to false to disable use of the peers database and the default initial
# peers. This will not delete saved peers.
sharder.usePeersDb=true

# Set to false to disable getting more peers from the currently connected peers.
# Only useful when debugging and want to limit the peers to those in peersDb or
# wellKnownPeers.
sharder.getMorePeers=true

# Set to true to run offline - do not connect to peers and do not listen for
# incoming peer connections. This is equivalent to setting
# sharder.shareMyAddress=false, sharder.wellKnownPeers=, sharder.testnetPeers= 
# and sharder.usePeersDb=false, and if set to true overrides those properties.
sharder.isOffline=false

# Ignore peer announced addresses. Do not change unless you understand what it
# does.
sharder.ignorePeerAnnouncedAddress=false

# Only allow peer addresses starting with "fc". This is for users of cjdns only,
# do not set if you don't know what that is.
sharder.cjdnsOnly=false

# Do not include exception details when returning error response to peers.
sharder.hideErrorDetails=false

#### API SERVER ####

# Accept http/json API requests.
sharder.enableAPIServer=true

# Hosts from which to allow http/json API requests, if enabled. Set to * to
# allow all. Can also specify networks in CIDR notation, e.g. 192.168.1.0/24.
# sharder.allowedBotHosts=127.0.0.1; localhost; [0:0:0:0:0:0:0:1]; 192.168.31.145;
sharder.allowedBotHosts=*

# Enable UPnP for the API ports.
sharder.enableAPIUPnP=true

# Host interface on which to listen for http/json API request, default localhost
# only. Set to 0.0.0.0 to allow the API server to accept requests from all
# network interfaces, including IPv6.

#sharder.apiServerHost=127.0.0.1
sharder.apiServerHost=0.0.0.0

# Idle timeout for http/json API request connections, milliseconds.
sharder.apiServerIdleTimeout=30000

# Directory with html and javascript files for the new client UI, and admin
# tools utilizing the http/json API.
sharder.apiResourceBase=./html/www

# Default page for the API server.
sharder.apiWelcomeFile=index.html

# Java API documentation directory, optional.
sharder.javadocResourceBase=./html/doc

# Enable Cross Origin Filter for the API server.
sharder.apiServerCORS=true

# Add X-Frame-Options SAMEORIGIN header to every response as a protection
# against clickjacking.
sharder.apiFrameOptionsSameOrigin=true

# Enable SSL for the API server (also need to set sharder.keyStorePath and
# sharder.keyStorePassword).
# Non-SSL connections will be disabled if sharder.apiServerSSLPort is equal to
# sharder.apiServerPort.
# Otherwise, both SSL and non-SSL connections will be accepted.
sharder.apiSSL=false

# Enabled cipher suites for the API server when SSL is enabled. The list below
# is an example to use for choosing AES-GCM instead of AES-CBC, not the default.
#sharder.apiSSLCiphers=TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384; \
#  TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256; \
#  TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384; \
#  TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256;

# Enforce requests that require POST to only be accepted when submitted as POST.
sharder.apiServerEnforcePOST=true

# Compress Http responses for the API server.
sharder.enableAPIServerGZIPFilter=false

# Password that should be provided when executing protected (administrative) API
# requests.
# Please choose a decent password here. Preferably, use a password generator.
# Password protection is disabled and password is not needed when the API server
# only listens on the localhost interface, i.e. when 
# sharder.apiServerHost=127.0.0.1
sharder.adminPassword=

# Set to true to disable the password protection for admin API requests even
# when API server is publicly accessible. Not recommended.
sharder.disableAdminPassword=true

# The maximum number of records possible to retrieve with a single request. This
# restriction is not enforced if the admin password is provided, or is not
# needed (disabled or listening on localhost only).
sharder.maxAPIRecords=1000

# API event registration timeout (seconds). The timeout is reset each time an
# event wait request is received from the application. The minimum value is 15
# seconds.
sharder.apiEventTimeout=300

# Maximum number of applications with active event registrations.
sharder.apiMaxEventUsers=32

# Maximum file size accepted for upload, in bytes. Default and minimum value
# accepted is 43008 (42 kbytes).
#sharder.maxUploadFileSize=0

# If an unsigned transaction is submitted with insufficient fee, set the fee to
# the minimum fee calculated for this transaction instead, as if feeNQT=0 has
# been specified. Default is false.
sharder.correctInvalidFees=false

# APIs to disable, as a semicolon separated list.
sharder.disabledAPIs=

# Groups of APIs to disable, as a semicolon separated list of API tag names.
sharder.disabledAPITags=

# Set to true to enable the business apis for business API requests
# when API server is publicly accessible.
sharder.enableBizAPIs=true

# Enables the API proxy. Requests are forwarded to a randomly chosen peer
# providing openAPI service. Outgoing transactions are signed locally - the
# secret phrase is never sent to the remote peer.
# Used by light clients or when the blockchain is not yet downloaded.
# For openAPI nodes, the API proxy remains disabled, ignoring this setting.
# For light clients, the API proxy is always enabled, ignoring this setting.
sharder.enableAPIProxy=true

# Operate as light client. Blockchain is not downloaded and processed, instead
# the API proxy is used (see sharder.enableAPIProxy).
# Light clients are not advertised as providing openAPI service even if they do
# have their API publicly accessible.
sharder.isLightClient=false

# If set, all requests will be forwarded to the specified openAPI peer
sharder.forceAPIProxyServerURL=

# The period remote API servers are blacklisted when not functioning (in
# milliseconds).
# The API proxy blacklisting mechanism is in addition to the peers blacklisting
# - if a peer is blacklisted, it won't be used by the proxy, but it is possible
# that a peer is online and correctly functioning, and only its open API is
# blocked (e.g. by firewall)
sharder.apiProxyBlacklistingPeriod=1800000


#### LOGGER ####
sharder.enableStackTraces=false
sharder.enableLogTraceback=false


#### DATABASE ####

# Database connection JDBC url, see the H2 documentation for possible
# customizations.
# Append ;AUTO_SERVER=TRUE to enable automatic mixed mode access.
# The sharder_db folder is expected to be in the current working directory, will be
# created if missing.
# sharder.dbUrl=jdbc:h2:./sharder_db/sharder;DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE;MV_STORE=FALSE

# Database connection JDBC url to use with the test network, if isTestnet=true.
# sharder.testDbUrl=jdbc:h2:./sharder_test_db/sharder;DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE;MV_STORE=FALSE

sharder.dbType=h2
sharder.testDbType=h2

sharder.dbDir=./sharder_db/sharder
sharder.testDbDir=./sharder_test_db/sharder

sharder.dbParams=DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE;MV_STORE=FALSE
sharder.testDbParams=DB_CLOSE_ON_EXIT=FALSE;MVCC=TRUE;MV_STORE=FALSE

sharder.dbUsername=sa
sharder.testDbUsername=sa

sharder.dbPassword=sa
sharder.testDbPassword=sa

# Database connection timeout in seconds.
sharder.dbLoginTimeout=70

# Database default lock timeout in seconds.
sharder.dbDefaultLockTimeout=60

# Database max memory rows limit.
sharder.dbMaxMemoryRows=1000000

# Maximum simultaneous database connections.
sharder.maxDbConnections=200

# The memory allocated to database cache, in kB.
# If set to 0, the cache size varies from a minimum of 16MB for heap sizes 160MB
# or less, to a maximum of 256MB for heap sizes 640MB or higher.
sharder.dbCacheKB=1048576

# Enable trimming of derived objects tables. Disabling this will significantly
# worsen performance.
sharder.trimDerivedTables=false

# If trimming is enabled, maintain enough previous height records to allow
# rollback of at least that many blocks. Cannot be set to less than 720.
# After increasing this value, a full re-scan also needs to be done in order for
# the previously trimmed records to be re-created and preserved.
sharder.maxRollback=800

# When trimming is enabled, it is run every sharder.trimFrequency blocks.
sharder.trimFrequency=1008

# Override the lifetime of prunable data to keep them longer, value in seconds.
# Set to -1 to disable pruning. Has no effect if set to less then the minimum
# required lifetime of two weeks (1209600 seconds) on mainnet, or 24 hours
# (86400 seconds) on testnet. Default is 90 days.
sharder.maxPrunableLifetime=7776000

# Include expired prunable parts if requested as long as it is still available.
# In order to provide the PRUNABLE peer service, sharder.maxPrunableLifetime must
# be -1 and sharder.includeExpiredPrunable must be true.  The PRUNABLE service means
# the peer will provide expired prunable data to other peers when requested.
sharder.includeExpiredPrunable=true

# Threshold for logging database statements (milliseconds).
sharder.statementLogThreshold=10000

# Threshold for logging database transactions (milliseconds).
sharder.transactionLogThreshold=15000

# Log the average transaction time after this many minutes.
sharder.transactionLogInterval=15

# Public keys are by default cached, which consumes 10-15 MB of memory.
sharder.enablePublicKeyCache=true
#### Blocks and transactions ####

# Delay generation of next block in order to accumulate more transactions in it.
# Waiting for much more than 15 s is not useful as transactions are allowed at
# most 15 s timestamp difference from the block they can be included in.
sharder.miningDelay=20

# Generate and submit the next block before its hit time in response to
# receiving a lower difficulty block. Submitting the block more than 15 s before
# its time however will lead to its rejection.
sharder.miningSpeedup=3

# Maximum number of mining accounts (proxy mining) allowed on this node.
sharder.maxNumberOfMiners=0

# Verify batches of blocks downloaded from a single peer with that many other
# peers. default value is 2
sharder.numberOfForkConfirmations=2
sharder.testnetNumberOfForkConfirmations=1

# Enable re-broadcasting of new transactions until they are received back from
# at least one peer, or found in the blockchain. This feature can optionally be
# disabled, to avoid the risk of revealing that this node is the submitter of
# such re-broadcasted new transactions.
sharder.enableTransactionRebroadcasting=true

# Do not allow the number of unconfirmed transactions in memory to exceed this
# value. If exceeded, the same transaction ordering as when choosing which
# transactions to include in a forged block is used to decide which to keep in
# the unconfirmed pool.
# Set to 0 or negative for no limit.
sharder.maxUnconfirmedTransactions=2000

# Maximum number of account monitors allowed on this node
sharder.maxNumberOfMonitors=100
#### ACCOUNT LEDGER ####
# Address of accounts (in RS format) to track balance changes in the ledger
# table, separated by ';'.
# Set to * to track changes for all accounts. Specify no accounts to disable
# the account ledger.
sharder.ledgerAccounts=*

# Specify 0 to not log unconfirmed changes, 1 to log unconfirmed changes or 2 to
# log only unconfirmed changes.
sharder.ledgerLogUnconfirmed=2

# Specify the number of blocks to keep when trimming the account ledger table.
# A value of zero will cause all blocks to be kept.
sharder.ledgerTrimKeep=30000


#### JETTY ####

# Settings for the Jetty Denial Of Service Filter, used for the peer networking
# server only.
sharder.peerServerDoSFilter.maxRequestsPerSec=30
sharder.peerServerDoSFilter.delayMs=1000
sharder.peerServerDoSFilter.maxRequestMs=300000

# keystore file and password, required if uiSSL or apiSSL are enabled.
sharder.keyStorePath=keystore
sharder.keyStorePassword=password

# keystore type defaults to JKS can be changed to PKCS12.
sharder.keyStoreType=JKS

#### Developers only ####

# Force re-validation of blocks and transaction at start.
sharder.forceValidate=false

# Force re-build of derived objects tables at start.
sharder.forceScan=false

# Scale epoch time for faster mining. Only works when offline.
# sharder.timeMultiplier=1

# Enable the following AddOns, which must also be on the classpath, e.g. placed
# in the addons/classes or addons/lib directory. List of class names, separated
# by semicolon.
#sharder.addOns=sharder.addons.Demo; sharder.addons.AfterStart; sharder.addons.BeforeShutdown
# Normally sets a customized security policy when AddOns are used.
# Set to true to use the default security manager when AddOns are used.
sharder.disableSecurityPolicy=false

#### Transaction fee ####
# Set the fee of transaction
sharder.fee.payment=100000000
sharder.fee.message=
sharder.fee.digitalGoods=
sharder.fee.accountControl=
sharder.fee.monetarySystem=
sharder.fee.dataFee=
sharder.fee.shuffling=
sharder.fee.data0M=
sharder.fee.data1M=
sharder.fee.data2M=
sharder.fee.data3M=
sharder.fee.data4M=400000000
sharder.fee.data5M=
sharder.fee.data6M=
sharder.fee.data7M=
sharder.fee.data8M=700000000
sharder.fee.data9M=
sharder.fee.data10M=
# H2 Database backup
sharder.db.enableBackup=false
sharder.db.backup.cron=0 4 * * *
sharder.db.backup.path=backup
sharder.db.backup.retainDays=15

#### IPFS Storage Testnet ####
# To be a storage node or not
sharder.storage.enable=false
# Access permissions: all-every one,local- local access only
sharder.storage.ipfs.access=all
# Where to save storage and config files, Default: storage/ipfs/.ipfs
sharder.storage.ipfs.storepath=
# Default initial bootstrap nodes
sharder.storage.ipfs.bootstrap.defaultNodes=
# Default initial bootstrap nodes used for testnet only.
sharder.storage.ipfs.bootstrap.defaultTestnetNodes=
# Swarm port
sharder.storage.ipfs.swarm.port=4001
# Gateway port
sharder.storage.ipfs.gateway.port=8088
# API port
sharder.storage.ipfs.api.port=9001
# Enable automatic periodic repo garbage collection. Default: false.
sharder.storage.ipfs.deamon.enable-gc=true

### COS update date ###
sharder.forkName=MainFork
sharder.cosUpdateDate=2021-11-07 19:11:11